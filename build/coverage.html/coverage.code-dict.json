{"/home/travis/build/npmtest/node-npmtest-swagger-jsdoc/test.js":"/* istanbul instrument in package npmtest_swagger_jsdoc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-swagger-jsdoc/lib.npmtest_swagger_jsdoc.js":"/* istanbul instrument in package npmtest_swagger_jsdoc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_swagger_jsdoc = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_swagger_jsdoc = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-swagger-jsdoc/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-swagger-jsdoc && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_swagger_jsdoc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_swagger_jsdoc\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_swagger_jsdoc.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_swagger_jsdoc.rollup.js'] =\n            local.assetsDict['/assets.npmtest_swagger_jsdoc.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_swagger_jsdoc.__dirname + '/lib.npmtest_swagger_jsdoc.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-swagger-jsdoc/node_modules/swagger-jsdoc/index.js":"module.exports = require('./lib');","/home/travis/build/npmtest/node-npmtest-swagger-jsdoc/node_modules/swagger-jsdoc/lib/index.js":"/** @module index */\n'use strict';\n\n// Dependencies\nvar fs = require('fs');\nvar glob = require('glob');\nvar path = require('path');\nvar doctrine = require('doctrine');\nvar jsYaml = require('js-yaml');\nvar parser = require('swagger-parser');\nvar swaggerHelpers = require('./swagger-helpers');\n\n/**\n * Parses the provided API file for JSDoc comments.\n * @function\n * @param {string} file - File to be parsed\n * @returns {{jsdoc: array, yaml: array}} JSDoc comments and Yaml files\n * @requires doctrine\n */\nfunction parseApiFile(file) {\n  var jsDocRegex = /\\/\\*\\*([\\s\\S]*?)\\*\\//gm;\n  var fileContent = fs.readFileSync(file, { encoding: 'utf8' });\n  var ext = path.extname(file);\n  var yaml = [];\n  var jsDocComments = [];\n\n  if (ext === '.yaml' || ext === '.yml') {\n    yaml.push(jsYaml.safeLoad(fileContent));\n  } else {\n    var regexResults = fileContent.match(jsDocRegex);\n    if (regexResults) {\n      for (var i = 0; i < regexResults.length; i = i + 1) {\n        var jsDocComment = doctrine.parse(regexResults[i], { unwrap: true });\n        jsDocComments.push(jsDocComment);\n      }\n    }\n  }\n\n  return {\n    yaml: yaml,\n    jsdoc: jsDocComments,\n  };\n}\n\n/**\n * Filters JSDoc comments for those tagged with '@swagger'\n * @function\n * @param {array} jsDocComments - JSDoc comments\n * @returns {array} JSDoc comments tagged with '@swagger'\n * @requires js-yaml\n */\nfunction filterJsDocComments(jsDocComments) {\n  var swaggerJsDocComments = [];\n\n  for (var i = 0; i < jsDocComments.length; i = i + 1) {\n    var jsDocComment = jsDocComments[i];\n    for (var j = 0; j < jsDocComment.tags.length; j = j + 1) {\n      var tag = jsDocComment.tags[j];\n      if (tag.title === 'swagger') {\n        swaggerJsDocComments.push(jsYaml.safeLoad(tag.description));\n      }\n    }\n  }\n\n  return swaggerJsDocComments;\n}\n\n/**\n * Converts an array of globs to full paths\n * @function\n * @param {array} globs - Array of globs and/or normal paths\n * @return {array} Array of fully-qualified paths\n * @requires glob\n */\nfunction convertGlobPaths(globs) {\n  return globs.reduce(function(acc, globString) {\n    var globFiles = glob.sync(globString);\n    return acc.concat(globFiles);\n  }, []);\n}\n\n/**\n * Generates the swagger spec\n * @function\n * @param {object} options - Configuration options\n * @returns {array} Swagger spec\n * @requires swagger-parser\n */\nmodule.exports = function(options) {\n  /* istanbul ignore if */\n  if (!options) {\n    throw new Error('\\'options\\' is required.');\n  } else /* istanbul ignore if */ if (!options.swaggerDefinition) {\n    throw new Error('\\'swaggerDefinition\\' is required.');\n  } else /* istanbul ignore if */ if (!options.apis) {\n    throw new Error('\\'apis\\' is required.');\n  }\n\n  // Build basic swagger json\n  var swaggerObject = swaggerHelpers.swaggerizeObj(options.swaggerDefinition);\n  var apiPaths = convertGlobPaths(options.apis);\n\n  // Parse the documentation in the APIs array.\n  for (var i = 0; i < apiPaths.length; i = i + 1) {\n    var files = parseApiFile(apiPaths[i]);\n    var swaggerJsDocComments = filterJsDocComments(files.jsdoc);\n\n    var problems = swaggerHelpers.findDeprecated([files, swaggerJsDocComments]);\n    // Report a warning in case potential problems encountered.\n    if (problems.length > 0) {\n      console.warn('You are using properties to be deprecated in v2.0.0');\n      console.warn('Please update to align with the swagger v2.0 spec.');\n      console.warn(problems);\n    }\n\n    swaggerHelpers.addDataToSwaggerObject(swaggerObject, files.yaml);\n    swaggerHelpers.addDataToSwaggerObject(swaggerObject, swaggerJsDocComments);\n  }\n\n  parser.parse(swaggerObject, function(err, api) {\n    if (!err) {\n      swaggerObject = api;\n    }\n  });\n\n  return swaggerObject;\n};\n","/home/travis/build/npmtest/node-npmtest-swagger-jsdoc/node_modules/swagger-jsdoc/lib/swagger-helpers.js":"'use strict';\n\n// Dependencies.\nvar RecursiveIterator = require('recursive-iterator');\n\n/**\n * Checks if tag is already contained withing target.\n * The tag is an object of type http://swagger.io/specification/#tagObject\n * The target, is the part of the swagger specification that holds all tags.\n * @function\n * @param {object} target - Swagger object place to include the tags data.\n * @param {object} tag - Swagger tag object to be included.\n * @returns {boolean} Does tag is already present in target\n */\nfunction _tagDuplicated(target, tag) {\n  // Check input is workable.\n  if (target && target.length && tag) {\n    for (var i = 0; i < target.length; i = i + 1) {\n      var targetTag = target[i];\n      // The name of the tag to include already exists in the taget.\n      // Therefore, it's not necessary to be added again.\n      if (targetTag.name === tag.name) {\n        return true;\n      }\n    }\n  }\n\n  // This will indicate that `tag` is not present in `target`.\n  return false;\n}\n\n/**\n * Adds the tags property to a swagger object.\n * @function\n * @param {object} conf - Flexible configuration.\n */\nfunction _attachTags(conf) {\n  var tag = conf.tag;\n  var swaggerObject = conf.swaggerObject;\n  var propertyName = conf.propertyName;\n\n  // Correct deprecated property.\n  if (propertyName === 'tag') {\n    propertyName = 'tags';\n  }\n\n  if (Array.isArray(tag)) {\n    for (var i = 0; i < tag.length; i = i + 1) {\n      if (!_tagDuplicated(swaggerObject[propertyName], tag[i])) {\n        swaggerObject[propertyName].push(tag[i]);\n      }\n    }\n  } else {\n    if (!_tagDuplicated(swaggerObject[propertyName], tag)) {\n      swaggerObject[propertyName].push(tag);\n    }\n  }\n}\n\n/**\n * Merges two objects\n * @function\n * @param {object} obj1 - Object 1\n * @param {object} obj2 - Object 2\n * @returns {object} Merged Object\n */\nfunction _objectMerge(obj1, obj2) {\n  var obj3 = {};\n  for (var attr in obj1) {\n    if (obj1.hasOwnProperty(attr)) {\n      obj3[attr] = obj1[attr];\n    }\n  }\n  for (var name in obj2) {\n    if (obj2.hasOwnProperty(name)) {\n      obj3[name] = obj2[name];\n    }\n  }\n  return obj3;\n}\n\n/**\n * Adds necessary swagger schema object properties.\n * @see https://goo.gl/Eoagtl\n * @function\n * @param {object} swaggerObject - The object to receive properties.\n * @returns {object} swaggerObject - The updated object.\n */\nfunction swaggerizeObj(swaggerObject) {\n  swaggerObject.swagger = '2.0';\n  swaggerObject.paths = swaggerObject.paths || {};\n  swaggerObject.definitions = swaggerObject.definitions || {};\n  swaggerObject.responses = swaggerObject.responses || {};\n  swaggerObject.parameters = swaggerObject.parameters || {};\n  swaggerObject.securityDefinitions = swaggerObject.securityDefinitions || {};\n  swaggerObject.tags = swaggerObject.tags || [];\n  return swaggerObject;\n}\n\n/**\n * List of deprecated or wrong swagger schema properties in singular.\n * @function\n * @returns {array} The list of deprecated property names.\n */\nfunction _getSwaggerSchemaWrongProperties() {\n  return [\n    'consume',\n    'produce',\n    'path',\n    'tag',\n    'definition',\n    'securityDefinition',\n    'scheme',\n    'response',\n    'parameter',\n  ];\n}\n\n/**\n * Makes a deprecated property plural if necessary.\n * @function\n * @param {string} propertyName - The swagger property name to check.\n * @returns {string} The updated propertyName if neccessary.\n */\nfunction _correctSwaggerKey(propertyName) {\n  var wrong = _getSwaggerSchemaWrongProperties();\n  if (wrong.indexOf(propertyName) > 0) {\n    // Returns the corrected property name.\n    return propertyName + 's';\n  }\n  return propertyName;\n}\n\n/**\n * Handles swagger propertyName in pathObject context for swaggerObject.\n * @function\n * @param {object} swaggerObject - The swagger object to update.\n * @param {object} pathObject - The input context of an item for swaggerObject.\n * @param {string} propertyName - The property to handle.\n */\nfunction _organizeSwaggerProperties(swaggerObject, pathObject, propertyName) {\n  var simpleProperties = [\n    'consume',\n    'consumes',\n    'produce',\n    'produces',\n    'path',\n    'paths',\n    'schema',\n    'schemas',\n    'securityDefinition',\n    'securityDefinitions',\n    'response',\n    'responses',\n    'parameter',\n    'parameters',\n    'definition',\n    'definitions',\n  ];\n\n  // Common properties.\n  if (simpleProperties.indexOf(propertyName) !== -1) {\n    var keyName = _correctSwaggerKey(propertyName);\n    var definitionNames = Object\n      .getOwnPropertyNames(pathObject[propertyName]);\n    for (var k = 0; k < definitionNames.length; k = k + 1) {\n      var definitionName = definitionNames[k];\n      swaggerObject[keyName][definitionName] =\n        pathObject[propertyName][definitionName];\n    }\n  // Tags.\n  } else if (propertyName === 'tag' || propertyName === 'tags') {\n    var tag = pathObject[propertyName];\n    _attachTags({\n      tag: tag,\n      swaggerObject: swaggerObject,\n      propertyName: propertyName,\n    });\n  // Paths.\n  } else {\n    swaggerObject.paths[propertyName] = _objectMerge(\n      swaggerObject.paths[propertyName], pathObject[propertyName]\n    );\n  }\n}\n\n/**\n * Adds the data in to the swagger object.\n * @function\n * @param {object} swaggerObject - Swagger object which will be written to\n * @param {object[]} data - objects of parsed swagger data from yml or jsDoc\n *                          comments\n */\nfunction addDataToSwaggerObject(swaggerObject, data) {\n  if (!swaggerObject || !data) {\n    throw new Error('swaggerObject and data are required!');\n  }\n\n  for (var i = 0; i < data.length; i = i + 1) {\n    var pathObject = data[i];\n    var propertyNames = Object.getOwnPropertyNames(pathObject);\n    // Iterating the properties of the a given pathObject.\n    for (var j = 0; j < propertyNames.length; j = j + 1) {\n      var propertyName = propertyNames[j];\n      // Do what's necessary to organize the end specification.\n      _organizeSwaggerProperties(swaggerObject, pathObject, propertyName);\n    }\n  }\n}\n\n/**\n * Aggregates a list of wrong properties in problems.\n * Searches in object based on a list of wrongSet.\n * @param {Array|object} list - a list to iterate\n * @param {Array} wrongSet - a list of wrong properties\n * @param {Array} problems - aggregate list of found problems\n */\nfunction seekWrong(list, wrongSet, problems) {\n  var iterator = new RecursiveIterator(list, 0, false);\n  for (var item = iterator.next(); !item.done; item = iterator.next()) {\n    var isDirectChildOfProperties =\n      item.value.path[item.value.path.length - 2] === 'properties';\n\n    if (wrongSet.indexOf(item.value.key) > 0 && !isDirectChildOfProperties) {\n      problems.push(item.value.key);\n    }\n  }\n}\n\n/**\n * Returns a list of problematic tags if any.\n * @function\n * @param {Array} sources - a list of objects to iterate and check\n * @returns {Array} problems - a list of problems encountered\n */\nfunction findDeprecated(sources) {\n  var wrong = _getSwaggerSchemaWrongProperties();\n  // accumulate problems encountered\n  var problems = [];\n  sources.forEach(function(source) {\n    // Iterate through `source`, search for `wrong`, accumulate in `problems`.\n    seekWrong(source, wrong, problems);\n  });\n  return problems;\n}\n\nmodule.exports = {\n  addDataToSwaggerObject: addDataToSwaggerObject,\n  swaggerizeObj: swaggerizeObj,\n  findDeprecated: findDeprecated,\n};\n","/home/travis/build/npmtest/node-npmtest-swagger-jsdoc/node_modules/swagger-jsdoc/bin/swagger-jsdoc.js":"#!/usr/bin/env node\n\n'use strict';\n\n/**\n * Module dependencies.\n */\nvar program = require('commander');\nvar fs = require('fs');\nvar path = require('path');\nvar swaggerJSDoc = require('../');\nvar pkg = require('../package.json');\nvar jsYaml = require('js-yaml');\nvar chokidar = require('chokidar');\n\n// Useful input.\nvar input = process.argv.slice(2);\n// The spec, following a convention.\nvar output = 'swagger.json';\n\n/**\n * Creates a swagger specification from a definition and a set of files.\n * @function\n * @param {object} swaggerDefinition - The swagger definition object.\n * @param {array} apis - List of files to extract documentation from.\n * @param {array} output - Name the output file.\n */\nfunction createSpecification(swaggerDefinition, apis, output) {\n  // Options for the swagger docs\n  var options = {\n    // Import swaggerDefinitions\n    swaggerDefinition: swaggerDefinition,\n    // Path to the API docs\n    apis: apis,\n  };\n\n  // Initialize swagger-jsdoc -> returns validated JSON or YAML swagger spec\n  var swaggerSpec;\n  var ext = path.extname(output);\n\n  if (ext === '.yml' || ext === '.yaml') {\n    swaggerSpec = jsYaml.dump(swaggerJSDoc(options));\n  } else {\n    swaggerSpec = JSON.stringify(swaggerJSDoc(options), null, 2);\n  }\n\n  fs.writeFile(output, swaggerSpec, function writeSpecification(err) {\n    if (err) {\n      throw err;\n    }\n    console.log('Swagger specification is ready.');\n  });\n}\n\nprogram\n  .version(pkg.version)\n  .usage('[options] <path ...>')\n  .option('-d, --definition <swaggerDef.js>', 'Input swagger definition.')\n  .option('-o, --output [swaggerSpec.json]', 'Output swagger specification.')\n  .option('-w, --watch', 'Whether or not to listen for continous changes.')\n  .parse(process.argv);\n\n// If no arguments provided, display help menu.\nif (!input.length) {\n  program.help();\n}\n\n// Require a definition file\nif (!program.definition) {\n  console.log('Definition file is required.');\n  console.log('You can do that, for example: ');\n  console.log('$ swag-jsdoc -d swaggerDef.js ' + input.join(' '));\n  program.help();\n  process.exit(1);\n}\n\n// Override default output file if provided.\nif (program.output) {\n  output = program.output;\n}\n\n// Definition file is specified:\nfs.readFile(program.definition, 'utf-8', function(err, data) {\n  if (err || data === undefined) {\n    return console.log('Definition file provided is not good.');\n  }\n\n  // Check whether the definition file is actually a usable .js file\n  if (path.extname(program.definition) !== '.js' &&\n    path.extname(program.definition) !== '.json'\n  ) {\n    console.log('Format as a module, it will be imported with require().');\n    return console.log('Definition file should be .js or .json');\n  }\n\n  // Get an object of the definition file configuration.\n  var swaggerDefinition = require(path.resolve(program.definition));\n\n  // Check for info object in the definition.\n  if (!swaggerDefinition.hasOwnProperty('info')) {\n    console.log('Definition file should contain an info object!');\n    return console.log('More at http://swagger.io/specification/#infoObject');\n  }\n\n  // Check for title and version properties in the info object.\n  if (!swaggerDefinition.info.hasOwnProperty('title') ||\n    !swaggerDefinition.info.hasOwnProperty('version')\n  ) {\n    console.log('The title and version properties are required!');\n    return console.log('More at http://swagger.io/specification/#infoObject');\n  }\n\n  // Continue only if arguments provided.\n  if (!program.args.length) {\n    return console.log('You must provide arguments for reading APIs.');\n  }\n\n  // If watch flag is turned on, listen for changes.\n  if (program.watch) {\n    var watcher = chokidar.watch(program.args, {\n      awaitWriteFinish: {\n        stabilityThreshold: 2000,\n        pollInterval: 100,\n      },\n    });\n\n    watcher.on('ready', function startMessage() {\n      console.log('Listening for changes ...');\n    });\n\n    watcher.on('change', function detectChange(path) {\n      console.log('Change detected in ' + path);\n    });\n\n    watcher.on('error', function catchErr(err) {\n      return console.error(err);\n    });\n\n    watcher.on('all', function regenerateSpec() {\n      createSpecification(swaggerDefinition, program.args, output);\n    });\n  }\n  // Just create the specification.\n  else {\n    createSpecification(swaggerDefinition, program.args, output);\n  }\n});\n"}